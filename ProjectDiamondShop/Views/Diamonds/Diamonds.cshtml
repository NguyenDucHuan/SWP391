@model List<DiamondShopBOs.tblDiamond>

@{
    List<string> clarities = new List<string>() { "IF", "VVS1", "VVS2", "VS1", "VS2", "SI1", "SI2", "SI3", "I1", "I2", "I3" };
    List<string> cuts = new List<string>() { "Excellent", "Very Good", "Good", "Fair", "Poor", "Ideal" };
    List<string> colors = new List<string>() { "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
    List<string> shapes = new List<string>() { "Round", "Princess", "Cushion", "Emerald", "Oval", "Radiant", "Asscher", "Marquise", "Heart", "Pear" };
    List<string> sortOptions = new List<string>() { "Price (Low to High)", "Price (High to Low)", "Carat Weight (Low to High)", "Carat Weight (High to Low)" };
    ViewBag.Clarities = clarities;
    ViewBag.Cuts = cuts;
    ViewBag.Colors = colors;
    ViewBag.Shapes = shapes;
    ViewBag.SortOptions = new SelectList(sortOptions);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Diamond Shop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link href="~/Content/Diamonds/Diamonds.css" rel="stylesheet" />
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <img src="/Image/HomePage/Logo/Hand with crystal_ Mystical, esoteric, magic or healing crystal_.jpg" alt="The Diamond Shop" height="40">
                <span>The Diamond Shop</span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Home")">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("About","Home")">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Contact", "Home")">Contact Us</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Diamonds")">Shop</a>
                    </li>
                    @if (Session["IsAuthenticated"] != null && (bool)Session["IsAuthenticated"])
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownCart" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-shopping-cart"></i>
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdownCart">
                                <li><a class="dropdown-item" href="@Url.Action("Index", "Cart")">View Cart</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("ViewOrders", "Home")">View Orders</a></li>
                            </ul>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownProfile" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-user"></i>
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdownProfile">
                                <li><a class="dropdown-item" href="@Url.Action("EditProfile", "ViewProfile")">View Profile</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("WarrantyDetails", "Warranty")">Warranty</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("Logout", "Login")">Logout</a></li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link login-btn" href="@Url.Action("Index", "Login")">Login</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <main role="main" class="pb-3">
        <div class="container">
            <div class="filter-container">
                @using (Html.BeginForm("Filter", "Diamonds", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="form-group col-md-12">
                            <label for="SearchTerm">Search Term:</label>
                            <input type="text" id="SearchTerm" name="SearchTerm" value="@ViewBag.SearchTerm" class="form-control" />
                        </div>
                        <div class="form-group col-md-3">
                            <label for="Clarity">Clarity:</label>
                            <select id="Clarity" name="Clarity" class="form-control">
                                <option value="">-- All --</option>
                                @foreach (var clarity in clarities)
                                {
                                    <option value="@clarity" @(clarity == ViewBag.SelectedClarity ? "selected" : "")>@clarity</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="Cut">Cut:</label>
                            <select id="Cut" name="Cut" class="form-control">
                                <option value="">-- All --</option>
                                @foreach (var cut in cuts)
                                {
                                    <option value="@cut" @(cut == ViewBag.SelectedCut ? "selected" : "")>@cut</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="Color">Color:</label>
                            <select id="Color" name="Color" class="form-control">
                                <option value="">-- All --</option>
                                @foreach (var color in colors)
                                {
                                    <option value="@color" @(color == ViewBag.SelectedColor ? "selected" : "")>@color</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="Shape">Shape:</label>
                            <select id="Shape" name="Shape" class="form-control">
                                <option value="">-- All --</option>
                                @foreach (var shape in shapes)
                                {
                                    <option value="@shape" @(shape == ViewBag.SelectedShape ? "selected" : "")>@shape</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-6">
                            <div class="ir246-search-noUiSlider">
                                <label for="price-slider">Diamond Price</label>
                                <div id="price-slider" class="range-slider">
                                    <input type="range" class="min-val price" min="0" max="50000" value="0" step="100" name="MinPrice">
                                    <input type="range" class="max-val price" min="0" max="50000" value="50000" step="100" name="MaxPrice">
                                    <div class="slider-track price"></div>
                                    <div class="min-tooltip price"></div>
                                    <div class="max-tooltip price"></div>
                                </div>
                                <div class="slider-values">
                                    <input type="text" class="min-input price" value="0">
                                    <input type="text" class="max-input price" value="50000">
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <div class="ir246-search-noUiSlider">
                                <label for="carat-slider">Carat</label>
                                <div id="carat-slider" class="range-slider">
                                    <input type="range" class="min-val carat" min="0.25" max="33.75" value="0.25" step="0.01" name="MinCaratWeight">
                                    <input type="range" class="max-val carat" min="0.25" max="33.75" value="33.75" step="0.01" name="MaxCaratWeight">
                                    <div class="slider-track carat"></div>
                                    <div class="min-tooltip carat"></div>
                                    <div class="max-tooltip carat"></div>
                                </div>
                                <div class="slider-values">
                                    <input type="text" class="min-input carat" value="0.25">
                                    <input type="text" class="max-input carat" value="33.75">
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="d-flex justify-content-between">
                                @Html.DropDownList("SortBy", (SelectList)ViewBag.SortOptions, new { @class = "form-control" })
                                <button type="submit" class="btn btn-primary">Filter</button>
                                <a class="btn btn-secondary" href="@Url.Action("Index", "Diamonds")">Reset</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <section>
            <div class="container">
                <div class="row">
                    @foreach (var item in Model)
                    {
                        string[] imagepart = item.diamondImagePath.Split('|');
                        <div class="col-md-3 col-sm-6" style="margin-top: 20px;">
                            <div class="product-grid6">
                                <div class="product-image6">
                                    <a href="@Url.Action("ViewDiamond", "Diamonds", new { id = item.diamondID })">
                                        <img class="pic-1" src="@imagepart[0]">
                                    </a>
                                    <ul class="social">
                                        <li><a href="@Url.Action("ViewDiamond", "Diamonds", new { id = item.diamondID })" data-tip="View More"><i class="fa fa-search"></i></a></li>
                                    </ul>
                                </div>
                                <div class="product-content">
                                    <h3 class="title"><a href="@Url.Action("ViewDiamond", "Diamonds", new { id = item.diamondID })">@item.diamondName</a></h3>
                                    <div class="priceD" data-price="@item.diamondPrice">
                                        @item.diamondPrice
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </section>

        @{
            int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
            int endPage = Math.Min(ViewBag.NumOfPage, ViewBag.CurrentPage + 2);
        }

        <div class="container">
            <ul class="pagination row justify-content-center" style="display:flex">
                @using (Html.BeginForm("Filter", "Diamonds", FormMethod.Post, new { id = "paginationForm" }))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="page" id="pageNumber" value="" />
                    <input type="hidden" name="SearchTerm" value="@ViewBag.SearchTerm" />
                    <input type="hidden" name="Clarity" value="@ViewBag.SelectedClarity" />
                    <input type="hidden" name="Cut" value="@ViewBag.SelectedCut" />
                    <input type="hidden" name="Color" value="@ViewBag.SelectedColor" />
                    <input type="hidden" name="Shape" value="@ViewBag.SelectedShape" />
                    <input type="hidden" name="MinPrice" value="@ViewBag.MinPrice" />
                    <input type="hidden" name="MaxPrice" value="@ViewBag.MaxPrice" />
                    <input type="hidden" name="MinCaratWeight" value="@ViewBag.MinCaratWeight" />
                    <input type="hidden" name="MaxCaratWeight" value="@ViewBag.MaxCaratWeight" />
                    <input type="hidden" name="sortBy" value="@ViewBag.SelectedSort" />
                    if (ViewBag.CurrentPage > 3)
                    {
                        <li class="page-item">
                            <button type="button" class="btn btn-link" onclick="setPageValue(1);"><span class="lnr lnr-chevron-left"> </span></button>
                        </li>
                    }
                    for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            <button type="button" class="btn btn-link @(i == ViewBag.CurrentPage ? "selected" : "")" onclick="setPageValue(@i);">@i</button>
                        </li>
                    }
                    if (ViewBag.CurrentPage < ViewBag.NumOfPage - 5)
                    {
                        <li class="page-item">
                            <button type="button" class="btn btn-link" onclick="setPageValue(@ViewBag.NumOfPage);">Last</button>
                        </li>
                    }
                }
            </ul>
        </div>

        <script>
            function setPageValue(page) {
                document.getElementById("pageNumber").value = page;
                document.getElementById("paginationForm").submit();
            }
            document.addEventListener('DOMContentLoaded', (event) => {
                const prices = document.querySelectorAll('.priceD');

                prices.forEach(priceElement => {
                    const priceValue = parseFloat(priceElement.getAttribute('data-price'));
                    priceElement.innerHTML = `$${priceValue.toLocaleString('de-DE', { minimumFractionDigits: 0, maximumFractionDigits: 3 })}`;
                });
            });
        </script>

        @Html.Hidden("CurrentPage", (int)ViewBag.CurrentPage)
        @Html.Hidden("PageSize", 12)
        </div>
    </main>

    <footer class="footer">
        <div class="container text-center">
            <p><a href="#">Back To Top</a></p>
            <p>&copy; 2024 The Diamond Shop. All rights reserved.</p>
            <p>
                <a href="#">Terms of Service</a> |
                <a href="#">Privacy Policy</a> |
                <a href="#">Refund Policy</a>
            </p>
        </div>
    </footer>

    <div class="modal fade" id="loginSuccessModal" tabindex="-1" role="dialog" aria-labelledby="loginSuccessModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header" style="color: black">
                    <h5 class="modal-title" id="loginSuccessModalLabel">Login Successful</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="close" style="margin-left:auto;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="color: black">
                    <p>Welcome, <span id="userName"></span>!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="modalOkButton">OK</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        window.onload = function () {
            slideMinPrice();
            slideMaxPrice();
            slideMinCarat();
            slideMaxCarat();
        };

        // Price Slider
        const minPriceVal = document.querySelector(".min-val.price");
        const maxPriceVal = document.querySelector(".max-val.price");
        const priceInputMin = document.querySelector(".min-input.price");
        const priceInputMax = document.querySelector(".max-input.price");
        const minTooltipPrice = document.querySelector(".min-tooltip.price");
        const maxTooltipPrice = document.querySelector(".max-tooltip.price");
        const minGapPrice = 1500;
        const rangePrice = document.querySelector(".slider-track.price");
        const sliderMinValuePrice = parseInt(minPriceVal.min);
        const sliderMaxValuePrice = parseInt(maxPriceVal.max);

        function slideMinPrice() {
            let gap = parseInt(maxPriceVal.value) - parseInt(minPriceVal.value);
            if (gap < minGapPrice) {
                minPriceVal.value = parseInt(maxPriceVal.value) - minGapPrice;
            }
            priceInputMin.value = minPriceVal.value;
            setAreaPrice();
        }

        function slideMaxPrice() {
            let gap = parseInt(maxPriceVal.value) - parseInt(minPriceVal.value);
            if (gap < minGapPrice) {
                maxPriceVal.value = parseInt(minPriceVal.value) + minGapPrice;
            }
            priceInputMax.value = maxPriceVal.value;
            setAreaPrice();
        }

        function setAreaPrice() {
            rangePrice.style.left = `${((minPriceVal.value - sliderMinValuePrice) / (sliderMaxValuePrice - sliderMinValuePrice)) * 100}%`;
            rangePrice.style.right = `${100 - ((maxPriceVal.value - sliderMinValuePrice) / (sliderMaxValuePrice - sliderMinValuePrice)) * 100}%`;
            minTooltipPrice.style.left = (minPriceVal.value / sliderMaxValuePrice) * 100 + "%";
            maxTooltipPrice.style.right = 100 - (maxPriceVal.value / sliderMaxValuePrice) * 100 + "%";
        }

        function setMinInputPrice() {
            let minPrice = parseInt(priceInputMin.value);
            if (minPrice < sliderMinValuePrice) {
                minPrice = sliderMinValuePrice;
            } else if (minPrice > parseInt(maxPriceVal.value) - minGapPrice) {
                minPrice = parseInt(maxPriceVal.value) - minGapPrice;
            }
            minPriceVal.value = minPrice;
            slideMinPrice();
        }

        function setMaxInputPrice() {
            let maxPrice = parseInt(priceInputMax.value);
            if (maxPrice > sliderMaxValuePrice) {
                maxPrice = sliderMaxValuePrice;
            } else if (maxPrice < parseInt(minPriceVal.value) + minGapPrice) {
                maxPrice = parseInt(minPriceVal.value) + minGapPrice;
            }
            maxPriceVal.value = maxPrice;
            slideMaxPrice();
        }

        priceInputMin.addEventListener("input", setMinInputPrice);
        priceInputMax.addEventListener("input", setMaxInputPrice);
        minPriceVal.addEventListener("input", slideMinPrice);
        maxPriceVal.addEventListener("input", slideMaxPrice);

        // Carat Slider
        const minCaratVal = document.querySelector(".min-val.carat");
        const maxCaratVal = document.querySelector(".max-val.carat");
        const caratInputMin = document.querySelector(".min-input.carat");
        const caratInputMax = document.querySelector(".max-input.carat");
        const minTooltipCarat = document.querySelector(".min-tooltip.carat");
        const maxTooltipCarat = document.querySelector(".max-tooltip.carat");
        const minGapCarat = 0.01;
        const rangeCarat = document.querySelector(".slider-track.carat");
        const sliderMinValueCarat = parseFloat(minCaratVal.min);
        const sliderMaxValueCarat = parseFloat(maxCaratVal.max);

        function slideMinCarat() {
            let gap = parseFloat(maxCaratVal.value) - parseFloat(minCaratVal.value);
            if (gap < minGapCarat) {
                minCaratVal.value = parseFloat(maxCaratVal.value) - minGapCarat;
            }
            caratInputMin.value = minCaratVal.value;
            setAreaCarat();
        }

        function slideMaxCarat() {
            let gap = parseFloat(maxCaratVal.value) - parseFloat(minCaratVal.value);
            if (gap < minGapCarat) {
                maxCaratVal.value = parseFloat(minCaratVal.value) + minGapCarat;
            }
            caratInputMax.value = maxCaratVal.value;
            setAreaCarat();
        }

        function setAreaCarat() {
            rangeCarat.style.left = `${((minCaratVal.value - sliderMinValueCarat) / (sliderMaxValueCarat - sliderMinValueCarat)) * 100}%`;
            rangeCarat.style.right = `${100 - ((maxCaratVal.value - sliderMinValueCarat) / (sliderMaxValueCarat - sliderMinValueCarat)) * 100}%`;
            minTooltipCarat.style.left = (minCaratVal.value / sliderMaxValueCarat) * 100 + "%";
            maxTooltipCarat.style.right = 100 - (maxCaratVal.value / sliderMaxValueCarat) * 100 + "%";
        }

        function setMinInputCarat() {
            let minCarat = parseFloat(caratInputMin.value);
            if (minCarat < sliderMinValueCarat) {
                minCarat = sliderMinValueCarat;
            } else if (minCarat > parseFloat(maxCaratVal.value) - minGapCarat) {
                minCarat = parseFloat(maxCaratVal.value) - minGapCarat;
            }
            minCaratVal.value = minCarat;
            slideMinCarat();
        }

        function setMaxInputCarat() {
            let maxCarat = parseFloat(caratInputMax.value);
            if (maxCarat > sliderMaxValueCarat) {
                maxCarat = sliderMaxValueCarat;
            } else if (maxCarat < parseFloat(minCaratVal.value) + minGapCarat) {
                maxCarat = parseFloat(minCaratVal.value) + minGapCarat;
            }
            maxCaratVal.value = maxCarat;
            slideMaxCarat();
        }

        caratInputMin.addEventListener("input", setMinInputCarat);
        caratInputMax.addEventListener("input", setMaxInputCarat);
        minCaratVal.addEventListener("input", slideMinCarat);
        maxCaratVal.addEventListener("input", slideMaxCarat);

        $(document).ready(function () {
            var successMessage = '@ViewBag.SuccessMessage';
            var userName = '@ViewBag.UserName';
            if (successMessage) {
                $('#userName').text(userName);
                $('#loginSuccessModal').modal('show');
                $('#modalOkButton').click(function () {
                    window.location.href = '@Url.Action("Index", "Home")';
                });
            }

            // Hide and show navbar on scroll
            var lastScrollTop = 0;
            $(window).scroll(function () {
                var st = $(this).scrollTop();
                if (st > lastScrollTop) {
                    // Scroll Down
                    $('.navbar').css('top', '-80px');
                } else {
                    // Scroll Up
                    $('.navbar').css('top', '0');
                }
                lastScrollTop = st;
            });
        });
    </script>
</body>
</html>
